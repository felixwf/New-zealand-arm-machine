#include "stepper_app.h"

osThreadId stepperTaskHandle;
void StepperTask(void const * argument);



void StepperInit(void)
{
	osThreadDef(stepperTask, StepperTask, osPriorityNormal, 0, 128);
  stepperTaskHandle = osThreadCreate(osThread(stepperTask), NULL);
}

void StepperTask(void const * argument)
{
	msg_init(&ArmMachineMsg);
	
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
		stepper_test();
    osDelay(1000);
  }
}

void convertMsgIntoRTU(ArmMachine_TypeDef ArmMachineMsg)
{
	/* 使用“直接数据运行”
		号机号码： 01h ==> 1
		功能代码： 10h
		写入寄存器起始地址： 00 58h
		写入寄存器数： 00 10h ==>16个
		写入byte数： 20h ==> 32个
		
		1. 运行数据No.： 00 00 00 00h ==> 0
		2. 方式： 相对定位（00 00 00 02）
		3. 位置： 00 00 21 34h ==> 8500 step
		4. 速度： 00 00 07 D0h ==> 2000Hz
		5. 起动/变速斜率： 00 00 05 DCh ==> 1.5kHz
		6. 停止斜率： 00 00 05 DCh ==> 1.5kHz
		7. 运行电流: 00 00 03 E8h ==> 100.0%
		
		反映触发： 全部数据反映（00 00 00 01）
		错误检查： 1C 08h
		
	*/
	uint8_t RTU_armMotor[41] = {
		ArmMachineMsg.armMotor.address,
		0x10,
		0x00, 0x58,
		0x00, 0x10,
		0x20,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, ArmMachineMsg.armMotor.mode == 'a' ? 0x01 : 0x02, /* 绝对定位0x01 相对定位0x02*/
		(uint8_t)(ArmMachineMsg.armMotor.targetPosition >> 24 & 0xff), 
		(uint8_t)(ArmMachineMsg.armMotor.targetPosition >> 16 & 0xff), 
		(uint8_t)(ArmMachineMsg.armMotor.targetPosition >> 8 & 0xff), 
		(uint8_t)(ArmMachineMsg.armMotor.targetPosition & 0xff),
		(uint8_t)(ArmMachineMsg.armMotor.topSpeed >> 24 & 0xff), 
		(uint8_t)(ArmMachineMsg.armMotor.topSpeed >> 16 & 0xff), 
		(uint8_t)(ArmMachineMsg.armMotor.topSpeed >> 8 & 0xff), 
		(uint8_t)(ArmMachineMsg.armMotor.topSpeed & 0xff),
		(uint8_t)(ArmMachineMsg.armMotor.startSlope >> 24 & 0xff), 
		(uint8_t)(ArmMachineMsg.armMotor.startSlope >> 16 & 0xff), 
		(uint8_t)(ArmMachineMsg.armMotor.startSlope >> 8 & 0xff), 
		(uint8_t)(ArmMachineMsg.armMotor.startSlope & 0xff),
		(uint8_t)(ArmMachineMsg.armMotor.stopSlope >> 24 & 0xff), 
		(uint8_t)(ArmMachineMsg.armMotor.stopSlope >> 16 & 0xff), 
		(uint8_t)(ArmMachineMsg.armMotor.stopSlope >> 8 & 0xff), 
		(uint8_t)(ArmMachineMsg.armMotor.stopSlope & 0xff),
		0x00, 0x00, 0x03, 0xe8,	// 100.0% full power
		0x00, 0x00, 0x00, 0x01,
		0x00, 0x00
	};
	
	
}


void msg_init(ArmMachine_TypeDef *ArmMachineMsg)
{
	StepperMsg_TypeDef baseMotor;
	StepperMsg_TypeDef updownMotor;
	StepperMsg_TypeDef armMotor;
	
	// baseMotor
	baseMotor.startSlope = 1500;		// 1.5kHz
	baseMotor.stopSlope = 1500;
	baseMotor.targetPosition = 0;
	baseMotor.topSpeed = 2000;
	baseMotor.mode = 'a';
	baseMotor.alarmCode = 0x00;
	
	baseMotor.address = 0x03;
	baseMotor.reductionRatio = 4;		// gearRatio = 1 : 4
	baseMotor.stepPerRound = 1000;
	baseMotor.step2angular = 360.0 / baseMotor.stepPerRound / baseMotor.reductionRatio;		// 
	baseMotor.step2distance = 0.0;
	
	// updownMotor
	updownMotor.startSlope = 1500;
	updownMotor.stopSlope = 1500;
	updownMotor.targetPosition = 0;
	updownMotor.topSpeed = 2000;
	updownMotor.mode = 'a';
	updownMotor.alarmCode = 0x00;
	
	updownMotor.address = 0x02;
	updownMotor.reductionRatio = 1;		// NA
	updownMotor.stepPerRound = 1000;
	updownMotor.step2angular = 0.0;
	updownMotor.step2distance = 1.0 / updownMotor.stepPerRound;		// 导程1mm，步进电机1圈对应1mm距离变化
	
	// armMotor
	armMotor.startSlope = 1500;
	armMotor.stopSlope = 1500;
	armMotor.targetPosition = 0;
	armMotor.topSpeed = 2000;
	armMotor.mode = 'a';
	armMotor.alarmCode = 0x00;
	
	armMotor.address = 0x02;
	armMotor.reductionRatio = 1;		// NA
	armMotor.stepPerRound = 1000;
	armMotor.step2angular = 0.0;
	armMotor.step2distance = 3.1415927 * 27 / armMotor.stepPerRound;		// 齿轮直径27mm
	
	ArmMachineMsg->armMotor = armMotor;
	ArmMachineMsg->baseMotor = baseMotor;
	ArmMachineMsg->updownMotor = updownMotor;
}

unsigned short CRC16_Modbus ( unsigned char *pdata, int len)
{
unsigned short crc=0xFFFF;
int i, j;
for ( j=0; j<len;j++)
{
crc=crc^pdata[j];
for ( i=0; i<8; i++)
{
if( ( crc&0x0001) >0)
{
crc=crc>>1;
crc=crc^ 0xa001;
}
else
crc=crc>>1;
}
}
return crc;
}


